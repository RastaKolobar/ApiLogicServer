from typing import List
import safrs
import sqlalchemy
from flask import request, jsonify
from safrs import jsonapi_rpc, SAFRSAPI, SAFRSBase
from sqlalchemy import Column, Integer, select, text
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.orm import object_mapper
from database import models
from database.db import Base

# recreate objective: using separate file preserves customizations, so can recreate models, endpoints, etc


def expose_rpcs(app, api):
    @app.route('/hello_world')
    def hello_world():  # test it with: http://localhost:5000/hello_world?user=ApiLogicServer
        """
        This is inserted to illustrate that APIs not limited to database objects, but are extensible.

        See: https://github.com/thomaxxl/safrs/wiki/Customization
        """
        user = request.args.get('user')
        return jsonify({"result": f'hello, {user}'})

    api.expose_object(ServicesEndPoint)
    print("RPCs exposed")


def get_attr_name(mapper, attr)-> str:
    """ returns name, type of attr metadata object """
    attr_name = None
    attr_type = "attr"
    if hasattr(attr, "key"):
        attr_name = attr.key
    elif isinstance(attr, hybrid_property):
        attr_name = attr.__name__
    elif hasattr(attr, "__name__"):
        attr_name = attr.__name__
    elif hasattr(attr, "name"):
        attr_name = attr.name
    if attr_name == "OrderDetailListX" or attr_name == "CustomerX":
        print("Debug Stop")
    if isinstance(attr, sqlalchemy.orm.relationships.RelationshipProperty):   # hasattr(attr, "impl"):   # sqlalchemy.orm.relationships.RelationshipProperty
        if attr.uselist:
            attr_type = "list"
        else: # if isinstance(attr.impl, sqlalchemy.orm.attributes.ScalarObjectAttributeImpl):
            attr_type = "object"
    return attr_name, attr_type


def copy_like_named_attrs(from_row: object, to_row: safrs.DB.Model):
    """
    :param from_row: service payload: dict - e.g., Order and OrderDetailsList
    :param to_row: instantiated mapped object (e.g., Order)
    :return: updates to_row with contents of from_row (recursively for lists)
    """
    row_mapper = object_mapper(to_row)
    for each_attr_name in from_row:
        if hasattr(to_row, each_attr_name):
            for each_attr in row_mapper.attrs:  # TODO - check use of LogicRow (using row_mapper.column_attrs??)
                mapped_attr_name, mapped_attr_type = get_attr_name(row_mapper, each_attr)
                if mapped_attr_name == each_attr_name:
                    if mapped_attr_type == "attr":
                        value = from_row[each_attr_name]
                        setattr(to_row, each_attr_name, value)
                    elif mapped_attr_type == "list":
                        child_from = from_row[each_attr_name]
                        for each_child_from in child_from:
                            child_class = each_attr.entity.class_
                            # eachOrderDetail = OrderDetail(); order.OrderDetailList.append(eachOrderDetail)
                            child_to = child_class()  # instance of child (e.g., OrderDetail)
                            copy_like_named_attrs(each_child_from, child_to)
                            child_list = getattr(to_row, each_attr_name)
                            child_list.append(child_to)
                            pass
                    elif mapped_attr_type == "object":
                        print("a parent object - skip (maybe do lookups here)")
                    break


class ServicesEndPoint(SAFRSBase, Base):
    """ this class is *not* a table, but defines an endpoint for the services below """
    __tablename__ = "Services"

    Id = Column(Integer, primary_key=True)

    """ goal: create rpc in class, without altering class (per recreate objective) """
    @classmethod
    @jsonapi_rpc(http_methods=["POST"])
    def add_order(self, *args, **kwargs):
        """
            args :
                CustomerId: ALFKI
                EmployeeId: 1
                Freight: 10
                OrderDetailList :
                  - ProductId: 1
                    Quantity: 1
                    Discount: 0
                  - ProductId: 2
                    Quantity: 2
                    Discount: 0
        """

        print("adding order")  # POST /Order/add_order
        print(kwargs)

        db = safrs.DB                       # Use the safrs.DB, not db!
        session = db.session  # sqlalchemy.orm.scoping.scoped_session
        new_order = models.Order()          # api_logic_server_run - SAFRSBase._s_auto_commit = False
        session.add(new_order)

        copy_like_named_attrs(kwargs, new_order)

        """ test: POST to Services/add_order
        {
            "meta": {
                "method": "add_order",
                "args": {
                  "CustomerId": "ALFKI",
                  "EmployeeId": 6,
                  "Freight": 10,
                  "OrderDetailList": [
                     {"ProductId": 1, "Quantity": 1, "Discount": 0},
                     {"ProductId": 2, "Quantity": 2, "Discount": 0}
                  ]
                }
            }
        }

        curl -X POST "http://localhost:5000/Services/add_order" -H  "accept: application/vnd.api+json" -H  "Content-Type: application/json" -d "        {            \"meta\": {                \"method\": \"add_order\",                \"args\": {                  \"CustomerId\": \"ALFKI\",                  \"EmployeeId\": 6,                  \"Freight\": 10,                  \"OrderDetailList\": [                     {\"ProductId\": 1, \"Quantity\": 1, \"Discount\": 0},                     {\"ProductId\": 2, \"Quantity\": 2, \"Discount\": 0}                  ]                }            }        }"
        """
        return {}
