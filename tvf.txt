# coding: utf-8
from sqlalchemy import Boolean, Column, DECIMAL, DateTime, Float, ForeignKey, Integer, LargeBinary, String, Table, Text, UniqueConstraint, text
from sqlalchemy.orm import relationship
from sqlalchemy.sql.sqltypes import NullType
from sqlalchemy.ext.declarative import declarative_base
from flask_sqlalchemy import SQLAlchemy
from safrs import SAFRSAPI, jsonapi_rpc
from safrs import JABase, DB


t_udfEmployeeInLocation = Table(  # define result for udfEmployeeInLocation
	"udfEmployeeInLocation", metadata,
	Column("Id", Integer),
	Column("Location", String(50)),
	Column("Name", String(50)))


t_udfEmployeeInLocationWithName = Table(  # define result for udfEmployeeInLocationWithName
	"udfEmployeeInLocationWithName", metadata,
	Column("Id", Integer),
	Column("Location", String(50)),
	Column("Name", String(50)))


class udfEmployeeInLocation(JABase):
	''' define service for udfEmployeeInLocation '''
	@staticmethod
	@jsonapi_rpc(http_methods=['POST'], valid_jsonapi=False)
	def udfEmployeeInLocation(location):
		"""
		description: expose TVF: udfEmployeeInLocation
		args:
			@location
		"""
		sql_query = db.text("SELECT * FROM udfEmployeeInLocation(:location)")
		query_result = db.engine.execute(sql_query, location=location)
		result = query_result.fetchall()
		return {"result" : list(result[0])}


class udfEmployeeInLocationWithName(JABase):
	''' define service for udfEmployeeInLocationWithName '''
	@staticmethod
	@jsonapi_rpc(http_methods=['POST'], valid_jsonapi=False)
	def udfEmployeeInLocationWithName(location, Name):
		"""
		description: expose TVF: udfEmployeeInLocationWithName
		args:
			@location
			@Name
		"""
		sql_query = db.text("SELECT * FROM udfEmployeeInLocationWithName(:location, :Name)")
		query_result = db.engine.execute(sql_query, location=location, Name=Name)
		result = query_result.fetchall()
		return {"result" : list(result[0])}


#  2 services created.
